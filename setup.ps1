# Script de configura√ß√£o do projeto INSURANCES
# Execute como administrador se necess√°rio

Write-Host "üöÄ Configurando projeto INSURANCES..." -ForegroundColor Green

# Verificar se o Docker est√° rodando
Write-Host "üîç Verificando Docker..." -ForegroundColor Yellow
try {
    docker version | Out-Null
    Write-Host "‚úÖ Docker est√° rodando" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n√£o est√° rodando. Inicie o Docker Desktop primeiro." -ForegroundColor Red
    exit 1
}

# Parar e remover containers existentes
Write-Host "üßπ Limpando containers existentes..." -ForegroundColor Yellow
docker stop insurances-sqlserver 2>$null
docker rm insurances-sqlserver 2>$null

# Iniciar SQL Server com Docker Compose
Write-Host "üê≥ Iniciando SQL Server..." -ForegroundColor Yellow
docker-compose up -d

# Aguardar o SQL Server estar pronto
Write-Host "‚è≥ Aguardando SQL Server estar pronto..." -ForegroundColor Yellow
$maxAttempts = 30
$attempt = 0

do {
    $attempt++
    Write-Host "Tentativa $attempt/$maxAttempts..." -ForegroundColor Gray
    
    try {
        $result = docker exec insurances-sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "@123456qwe" -Q "SELECT 1" 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ SQL Server est√° pronto!" -ForegroundColor Green
            break
        }
    } catch {
        # Ignorar erros durante a inicializa√ß√£o
    }
    
    Start-Sleep -Seconds 2
} while ($attempt -lt $maxAttempts)

if ($attempt -ge $maxAttempts) {
    Write-Host "‚ùå Timeout aguardando SQL Server" -ForegroundColor Red
    exit 1
}

# Restaurar pacotes NuGet
Write-Host "üì¶ Restaurando pacotes NuGet..." -ForegroundColor Yellow
dotnet restore

# Compilar solu√ß√£o
Write-Host "üî® Compilando solu√ß√£o..." -ForegroundColor Yellow
dotnet build

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro na compila√ß√£o" -ForegroundColor Red
    exit 1
}

# Executar migrations para a API de Propostas
Write-Host "üóÑÔ∏è Executando migrations para API de Propostas..." -ForegroundColor Yellow
dotnet ef database update --project INSURANCES.DATA --startup-project INSURANCES.PROPOSAL.API

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao executar migrations para API de Propostas" -ForegroundColor Red
    exit 1
}

# Executar migrations para a API de Contrata√ß√£o
Write-Host "üóÑÔ∏è Executando migrations para API de Contrata√ß√£o..." -ForegroundColor Yellow
dotnet ef database update --project INSURANCES.DATA --startup-project INSURANCES.HIRING.API

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao executar migrations para API de Contrata√ß√£o" -ForegroundColor Red
    exit 1
}

# Executar testes
Write-Host "üß™ Executando testes..." -ForegroundColor Yellow
dotnet test INSURANCE.TEST --verbosity minimal

Write-Host ""
Write-Host "üéâ Configura√ß√£o conclu√≠da com sucesso!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "1. Execute a API de Propostas: cd INSURANCES.PROPOSAL.API && dotnet run" -ForegroundColor White
Write-Host "2. Execute a API de Contrata√ß√£o: cd INSURANCES.HIRING.API && dotnet run" -ForegroundColor White
Write-Host "3. Acesse o Swagger:" -ForegroundColor White
Write-Host "   - Propostas: https://localhost:5001/swagger" -ForegroundColor White
Write-Host "   - Contrata√ß√£o: https://localhost:5003/swagger" -ForegroundColor White
Write-Host ""
Write-Host "üê≥ Para parar o SQL Server: docker-compose down" -ForegroundColor Yellow
Write-Host "üê≥ Para ver logs: docker-compose logs -f sqlserver" -ForegroundColor Yellow
